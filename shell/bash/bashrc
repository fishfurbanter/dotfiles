# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

####
#History size
####
HISTSIZE=100000
HISTFILESIZE=100000

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

if [ -x /etc/debian_version ]; then
        source $HOME/.bashrc_debian
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export PATH=$PATH:$HOME/.local/bin

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export PATH="${PATH}:${HOME}/.go/bin"
export LC_ALL=en_US.UTF-8

########################
# Rust configuration
########################

export PATH=$PATH:${HOME}/.cargo/bin
source $HOME/.cargo/env

########################
# Bash-it configuration
########################

export PATH=$PATH:$HOME/.local/bin

if [ -f ~/.functions ]; then
        . ~/.functions
fi

if [ -f ~/.variables ]; then
        . ~/.variables
fi

if [ -f ~/.aliases ]; then
    . ~/.aliases
fi

# Don't check mail when opening terminal.
unset MAILCHECK

# Change this to your console based IRC client of choice.
export IRC_CLIENT='weechat'

# Set this to false to turn off version control status checking within the prompt for all themes
export SCM_CHECK=true

# Set Xterm/screen/Tmux title with only a short hostname.
# Unomment this (or set SHORT_HOSTNAME to something else),
# Will otherwise fall back on $HOSTNAME.
#export SHORT_HOSTNAME=$(hostname -s)

####
# Set vim as the default shell editor
####
export VISUAL=nvim
export EDITOR="$VISUAL"


####
# Path
####

export GOPATH="$HOME/.go"
export PATH=$PATH:$UTILS/sh:$UTILS/py:$GOPATH/bin:$HOME/.local/bin


# FZF
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# Aliases
source $HOME/.aliases

# Git branch completion
# if [ -f ~/.git-completion.bash ]; then
#   . ~/.git-completion.bash
# fi

####
# Taskwarrior
####
export TASKWARRIOR_DATA_DIR=$HOME/.task
# task-sync() { repo-sync $TASKWARRIOR_DATA_DIR }

export NODE_PATH=$HOME/.npm

# Starship
export STARSHIP_CONFIG=${HOME}/.config/starship.toml
eval "$(starship init bash)"

source-completion

# Zoxide
eval "$(zoxide init bash)"

# AWS Vault
export AWS_VAULT_PROMPT=terminal
export AWS_VAULT_BACKEND=pass

# Kubectl plugins
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

export AWS_VAULT_BACKEND=pass
export PROJECT_ROOT=~/Projects

# All python virtualenv and pyenv configuration removed
# Will be using docker to build python software from now on

export GPG_TTY=$(tty)
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent
